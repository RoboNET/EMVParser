using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;
using RoboNet.EMVParser;

namespace RoboNET.EMVParser.Benchmark
{
    [MemoryDiagnoser]
    public class ParseTags
    {
        private const string Example =


        private readonly byte[] tag;
        
        public ParseTags()
        {
            tag = Convert.FromHexString(Example);
        }


        [Benchmark]
        public void ParseTagsList() => TLVParser.ParseTagsList(tag);
        
        [Benchmark]
        public void GetTagValue() => TLVParser.GetTagValue(tag, "9F02");

    }

    public class Program
    {
        public static void Main(string[] args)
        {
            var summary = BenchmarkRunner.Run<ParseTags>();
        }
    }
}